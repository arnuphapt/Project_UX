"use client";

import React, { useState, useRef } from 'react';
import SmartUploadImage from './SmartUploadImage';
import { useSession } from "next-auth/react";
import { getFirestore, setDoc, doc } from 'firebase/firestore';
import { useRouter } from 'next/navigation';
import Data from './Data';
import { HiArrowSmallLeft } from "react-icons/hi2";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { Input, CheckboxGroup, Checkbox, Button, Chip, Modal, ModalContent, ModalHeader, ModalBody, ModalFooter } from "@heroui/react";
import UserTag from './UserTag';
import { app } from '../Shared/firebaseConfig';
import { CheckCircle } from 'lucide-react';

function Form({ studentId, section }) {
  const [techList, setTechList] = useState([]);
  const [autoGeneratedTags, setAutoGeneratedTags] = useState([]);
  const [customTags, setCustomTags] = useState([]); // For custom tags
  const { data: session } = useSession();
  const [title, setTitle] = useState('');
  const [desc, setDesc] = useState('');
  const [link, setLink] = useState('');
  const [file, setFile] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const router = useRouter();
  const db = getFirestore(app);
  const postId = Date.now().toString();
  const customTagInputRef = useRef(null);
  const [errors, setErrors] = useState({
    title: '',
    desc: '',
    link: '',
    section: '',
    techList: '',
  });

  // Handle custom tags
  const handleTagsChange = (value) => {
    setCustomTags(value);
  };

  const addCustomTag = () => {
    if (customTagInputRef.current && customTagInputRef.current.value.trim()) {
      const newTag = customTagInputRef.current.value.trim();
      if (!customTags.includes(newTag)) {
        setCustomTags([...customTags, newTag]);
        customTagInputRef.current.value = '';
      }
    }
  };

  const validate = () => {
    let isValid = true;
    let newErrors = { title: '', desc: '', link: '', techList: '' };

    if (!title.trim()) {
      newErrors.title = 'Title is required';
      isValid = false;
    } else if (title.length > 40) {
      newErrors.title = 'Title must be 40 characters or less';
      isValid = false;
    }

    if (!desc.trim()) {
      newErrors.desc = 'Description is required';
      isValid = false;
    } else if (desc.length > 80) {
      newErrors.desc = 'Description must be 80 characters or less';
      isValid = false;
    }

    if (!link.trim()) {
      newErrors.link = 'Link is required';
      isValid = false;
    } else {
      try {
        new URL(link);
      } catch (_) {
        newErrors.link = 'Invalid URL format';
        isValid = false;
      }
    }

    const allTags = [...techList, ...autoGeneratedTags, ...customTags];
    if (allTags.length === 0) {
      newErrors.techList = 'At least one technology or tag must be selected';
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const onSave = async () => {
    if (!validate()) {
      return;
    }
    if (!imageUrl) {
      toast.error('An image must be uploaded.');
      return;
    }
    if (!studentId.trim() || !section.trim()) {
      toast.error('Student ID and Section are required. Redirecting to profile...', {
        onClose: () => {
          setTimeout(() => {
            router.push(`/users/${session.user.email}?openModal=true`);
          }, 1000);
        }
      });
      return;
    }

    setLoading(true);
    try {
      const allTags = [...new Set([...techList, ...autoGeneratedTags, ...customTags])];
      
      const postData = {
        title: title,
        desc: desc,
        link: link,
        image: imageUrl,
        techList: allTags,
        section: section,
        studentId: studentId,
        userName: session.user.name,
        email: session.user.email,
        userImage: session.user.image,
        id: postId,
        timestamp: new Date()
      };

      await setDoc(doc(db, 'pinterest-post', postId), postData);
      // Show success modal instead of redirecting immediately
      setShowSuccessModal(true);
    } catch (error) {
      console.error('Error saving post:', error);
      toast.error('Failed to save post.');
    } finally {
      setLoading(false);
    }
  };

  const handleCloseModal = () => {
    setShowSuccessModal(false);
    router.push("/post");
  };

  const handleTagsGenerated = (tags) => {
    setAutoGeneratedTags(tags);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      e.preventDefault();
      const newTag = e.target.value.trim();
      if (!customTags.includes(newTag)) {
        setCustomTags([...customTags, newTag]);
        e.target.value = '';
      }
    }
  };

  return (
    <div className='bg-white p-6 md:p-8 lg:p-12 xl:p-16 rounded-2xl'>
      <div className='flex items-center justify-between mb-6'>
        <Button 
          variant="light" 
          isIconOnly 
          size='lg' 
          className='text-[25px]' 
          onPress={() => router.push("/")}
        >
          <HiArrowSmallLeft/>
        </Button>
        <Button 
          className='font-semibold bg-gradient-to-tr from-cyan-500 to-blue-500 text-white shadow-lg'
          size='xl'
          color="primary"
          onPress={onSave}
          isLoading={loading}
          auto
        >
          {loading ? 'Loading...' : 'Upload'}
        </Button>
      </div>
      
      <ToastContainer position="bottom-center" autoClose={2000} />
      
      {/* Success Modal */}
      <Modal 
        isOpen={showSuccessModal} 
        onClose={handleCloseModal}
        backdrop="blur"
      >
        <ModalContent>
          <ModalBody>
            <div className="text-center py-4">
                <div className="flex justify-center mb-4">
                  <CheckCircle size={84} className="text-green-500" />
                </div>
              <p className="mt-4 text-3xl font-bold">Success</p>
              <p className="mt-2 text-sm text-gray-500">You have successfully created your post</p>
            </div>
          </ModalBody>
              <ModalFooter className="justify-center">
            <Button 
              color="success"
              onPress={handleCloseModal}
            >
              OK
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      
      <div className='grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8'>
        <SmartUploadImage 
          setFile={setFile}
          currentImageUrl={imageUrl}
          postId={postId}
          onUploadComplete={setImageUrl}
          onTagsGenerated={handleTagsGenerated}
        />
        
        <div className="lg:col-span-2">
          <UserTag user={session?.user} className='outline-none' />
          <div className='grid grid-cols-3 gap-4'>
            <Input
              type="text"
              variant='underlined'
              size='lg'
              value={studentId}
              isDisabled
              label='Student ID'
              className='text-base md:text-lg lg:text-xl outline-none w-full pb-2 mt-4 col-span-2'
            />
            <Input
              type="text"
              variant='underlined'
              size='lg'
              value={section}
              isDisabled
              label='Section'
              className='text-base md:text-lg lg:text-xl outline-none w-full pb-2 mt-4'
            />
          </div>
          
          <div className='w-full'>
            <Input
              type="text"
              label='ADD A TITLE'
              variant='underlined'
              size='lg'
              onChange={(e) => setTitle(e.target.value)}
              className='text-2xl md:text-3xl lg:text-4xl outline-none font-bold w-full mt-2'
              errorMessage={errors.title}
              isInvalid={!!errors.title}
            />
            <h2 className='text-xs md:text-sm text-gray-400 mt-2'>Name your work</h2>
            
            <Input
              type="text"
              variant='underlined'
              size='lg'
              onChange={(e) => setDesc(e.target.value)}
              label='Description'
              className='text-base md:text-lg lg:text-xl outline-none w-full pb-2 mt-4'
              errorMessage={errors.desc}
              isInvalid={!!errors.desc}
            />
            
            <Input
              type='url'
              variant='underlined'
              onChange={(e) => setLink(e.target.value)}
              label='Destination Link'
              size='lg'
              className='text-base md:text-lg lg:text-xl outline-none w-full pb-2 mt-4'
              errorMessage={errors.link}
              isInvalid={!!errors.link}
            />
            <div className="mt-4">
              <div className="flex items-end gap-2">
                <div className="flex-grow">
                  <Input
                    label="Add Custom Tags (Optional)"
                    variant="underlined"
                    size='lg'
                    ref={customTagInputRef}
                    onKeyDown={handleKeyDown}
                    className='text-base md:text-lg lg:text-xl outline-none w-full pb-2 mt-4'
                    isClearable
                  />
                </div>
                <Button 
                  className="mb-2 font-semibold bg-gradient-to-tr from-cyan-500 to-blue-500 text-white shadow-lg"
                  variant="solid"
                  onPress={addCustomTag}
                >
                  Add Tag
                </Button>
              </div>
              <div className="flex flex-wrap gap-2 mt-3">
                {customTags.map((tag, index) => (
                  <Chip
                    key={index}
                    onClose={() => {
                      setCustomTags(customTags.filter((_, i) => i !== index));
                    }}
                    variant="flat"
                    color="primary"
                    className="capitalize"
                  >
                    {tag}
                  </Chip>
                ))}
              </div>
            </div>
            <div className="border-b-2 border-gray-300 p-2 pb-4 mt-6 md:mt-5">
              <CheckboxGroup
                label="Select Tags"
                color="primary"
                orientation="horizontal"
                value={techList}
                onChange={setTechList}
              >
                {Data.Technology.map((item, index) => (
                  <Checkbox key={index} value={item.name} className='pr-5 pt-2'>
                    {item.name}
                  </Checkbox>
                ))}
              </CheckboxGroup>
            </div>

            {errors.techList && (
              <p className="text-red-500 text-sm mt-1">{errors.techList}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default Form;